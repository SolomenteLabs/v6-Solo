"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainRegistryChainUtil = void 0;
const utils_1 = require("@chain-registry/utils");
class ChainRegistryChainUtil {
    _assets = [];
    _chainName;
    constructor(options) {
        const { chainName, chainInfo } = options;
        this._chainName = options.chainName;
        this._assets = [
            {
                assets: [
                    ...chainInfo.nativeAssetList.assets,
                    ...chainInfo.assetLists.flatMap(({ assets }) => assets)
                ],
                chain_name: chainName
            }
        ];
    }
    getAssetByDenom(denom) {
        return (0, utils_1.getAssetByDenom)(this._assets, denom, this._chainName);
    }
    getAssetBySymbol(symbol) {
        return (0, utils_1.getAssetBySymbol)(this._assets, symbol, this._chainName);
    }
    getDenomByCoinGeckoId(coinGeckoId) {
        return (0, utils_1.getDenomByCoinGeckoId)(this._assets, coinGeckoId, this._chainName);
    }
    getCoinGeckoIdByDenom(coinGeckoId) {
        return (0, utils_1.getCoinGeckoIdByDenom)(this._assets, coinGeckoId, {
            chainName: this._chainName
        });
    }
    getSymbolByDenom(denom) {
        return (0, utils_1.getSymbolByDenom)(this._assets, denom, this._chainName);
    }
    getDenomBySymbol(symbol) {
        return (0, utils_1.getDenomBySymbol)(this._assets, symbol, this._chainName);
    }
    getExponentByDenom(denom) {
        return (0, utils_1.getExponentByDenom)(this._assets, denom, this._chainName);
    }
    getExponentBySymbol(symbol) {
        return (0, utils_1.getExponentBySymbol)(this._assets, symbol, this._chainName);
    }
    getAssetLogoByDenom(denom) {
        return (0, utils_1.getAssetLogoByDenom)(this._assets, denom, this._chainName);
    }
    getAssetNameByDenom(denom) {
        return (0, utils_1.getAssetNameByDenom)(this._assets, denom, this._chainName);
    }
    getChainNameByDenom(denom) {
        return (0, utils_1.getChainNameByDenom)(this._assets, denom);
    }
    mapCoinGeckoPricesToDenoms(prices) {
        return (0, utils_1.mapCoinGeckoPricesToDenoms)(this._assets, prices);
    }
    convertBaseUnitToDollarValue(prices, symbol, amount) {
        return (0, utils_1.convertBaseUnitToDollarValue)(this._assets, prices, symbol, amount, this._chainName);
    }
    convertDollarValueToBaseUnit(prices, symbol, value) {
        return (0, utils_1.convertDollarValueToBaseUnit)(this._assets, prices, symbol, value, this._chainName);
    }
    convertBaseUnitToDisplayUnit(symbol, amount) {
        return (0, utils_1.convertBaseUnitToDisplayUnit)(this._assets, symbol, amount, this._chainName);
    }
    convertDisplayUnitToBaseUnit(symbol, amount) {
        return (0, utils_1.convertDisplayUnitToBaseUnit)(this._assets, symbol, amount, this._chainName);
    }
}
exports.ChainRegistryChainUtil = ChainRegistryChainUtil;
