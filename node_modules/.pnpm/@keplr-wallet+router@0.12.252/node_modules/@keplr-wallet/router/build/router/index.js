"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
const encoding_1 = require("../encoding");
const uint8_array_1 = require("../uint8-array");
class Router {
    constructor(envProducer) {
        this.envProducer = envProducer;
        this.msgRegistry = new encoding_1.MessageRegistry();
        this.registeredHandler = new Map();
        this.guards = [];
        this.port = "";
        this._isInitialized = false;
    }
    get isInitialized() {
        return this._isInitialized;
    }
    registerMessage(msgCls) {
        this.msgRegistry.registerMessage(msgCls);
    }
    addHandler(route, handler) {
        if (this.registeredHandler.has(route)) {
            throw new Error(`Already registered type ${route}`);
        }
        this.registeredHandler.set(route, handler);
    }
    addGuard(guard) {
        this.guards.push(guard);
    }
    listen(port, initFn) {
        return __awaiter(this, void 0, void 0, function* () {
            this.port = port;
            this.attachHandler();
            if (initFn) {
                let initWaiter;
                this._initWaiter = new Promise((resolve) => {
                    initWaiter = resolve;
                });
                yield initFn();
                initWaiter();
            }
            this._isInitialized = true;
            return;
        });
    }
    unlisten() {
        this.port = "";
        this.detachHandler();
    }
    handleMessage(message, sender) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isInitialized) {
                yield this._initWaiter;
            }
            const msg = this.msgRegistry.parseMessage(uint8_array_1.JSONUint8Array.unwrap(message));
            const env = this.envProducer(sender, (_a = msg.routerMeta) !== null && _a !== void 0 ? _a : {});
            for (const guard of this.guards) {
                yield guard(env, msg, sender);
            }
            // Can happen throw
            msg.validateBasic();
            const route = msg.route();
            if (!route) {
                throw new Error("Null router");
            }
            const handler = this.registeredHandler.get(route);
            if (!handler) {
                throw new Error("Can't get handler");
            }
            return uint8_array_1.JSONUint8Array.wrap(yield handler(env, msg));
        });
    }
}
exports.Router = Router;
//# sourceMappingURL=index.js.map