"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendSimpleMessage = exports.SimpleMessage = void 0;
const message_1 = require("./message");
const symbolRoute = Symbol();
const symbolType = Symbol();
class SimpleMessage extends message_1.Message {
    constructor(route, type, data) {
        super();
        this[symbolRoute] = route;
        this[symbolType] = type;
        for (const key of Object.keys(data)) {
            this[key] = data[key];
        }
    }
    route() {
        return this[symbolRoute];
    }
    type() {
        return this[symbolType];
    }
    // validateBasic should be handled in background.
    validateBasic() {
        // noop
    }
    // approveExternal should be handled in background.
    approveExternal() {
        return true;
    }
}
exports.SimpleMessage = SimpleMessage;
/**
 * Send message without typing and message instance.
 * Usage of this function is not recommended.
 * However, if you know about this function well,
 * and you want to avoid the usage of troublesome typing and class definition,
 * You can try using this function.
 * @param requester
 * @param port
 * @param route
 * @param type
 * @param data
 */
function sendSimpleMessage(requester, port, route, type, data) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield requester.sendMessage(port, new SimpleMessage(route, type, data));
    });
}
exports.sendSimpleMessage = sendSimpleMessage;
//# sourceMappingURL=simple.js.map