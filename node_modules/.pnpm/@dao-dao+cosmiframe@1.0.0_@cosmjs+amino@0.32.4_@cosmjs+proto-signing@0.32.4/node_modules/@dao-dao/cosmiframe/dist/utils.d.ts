import { RequestMethodCallMessageNoId, Origin, CalledParentMethodResult, OverrideHandler, MethodCallResultMessageNoId } from './types.js';
import '@cosmjs/amino';
import '@cosmjs/proto-signing';

/**
 * Origin specified by the iframe to allow all origins. This is unsafe and
 * should not be done.
 */
declare const UNSAFE_ALLOW_ANY_ORIGIN = "UNSAFE_ALLOW_ANY_ORIGIN";
/**
 * Send message call request to parent and listen for the result, only accepting
 * results from parents of allowed origins. Returns a promise that resolves with
 * the result on success or rejects with an error.
 */
declare const callParentMethod: <T = any>(message: RequestMethodCallMessageNoId, origins: Origin[], timeout?: number) => Promise<CalledParentMethodResult<T>>;
/**
 * Convert override handler into a method call result message. If the override
 * handler is to call the method normally, returns undefined.
 */
declare const processOverrideHandler: (handler: OverrideHandler) => MethodCallResultMessageNoId | undefined;
/**
 * Returns whether or not the current app is being used in an iframe.
 */
declare const isInIframe: () => boolean;
/**
 * Returns whether or not the origin is allowed.
 */
declare const isOriginAllowed: (allowedOrigins: Origin[], origin: string) => boolean;

export { UNSAFE_ALLOW_ANY_ORIGIN, callParentMethod, isInIframe, isOriginAllowed, processOverrideHandler };
